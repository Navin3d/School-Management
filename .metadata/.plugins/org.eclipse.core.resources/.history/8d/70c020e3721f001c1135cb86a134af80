package gmc.project.schoolmanagement.user.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import gmc.project.schoolmanagement.user.data.UserEntity;
import gmc.project.schoolmanagement.user.data.UserRepository;
import gmc.project.schoolmanagement.user.model.Roles;
import gmc.project.schoolmanagement.user.model.SignUpRequestModel;
import gmc.project.schoolmanagement.user.model.SignUpResponseModel;
import gmc.project.schoolmanagement.user.shared.UserDto;

@Service
public class UserServiceImpl implements UserService {
	
	private final UserRepository userRepository;
	private final BCryptPasswordEncoder bCryptPasswordEncoder;

	public UserServiceImpl(UserRepository userRepository, BCryptPasswordEncoder bCryptPasswordEncoder) {
		super();
		this.userRepository = userRepository;
		this.bCryptPasswordEncoder = bCryptPasswordEncoder;
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		UserEntity userEntity = userRepository.findByEmail(username);
		if(userEntity == null) throw new UsernameNotFoundException("User with Name " + username + " Not found.");
		return new User(userEntity.getEmail(), userEntity.getEncryptedPassword(), true, true, true, true, new ArrayList<>());
	}

	@Override
	public SignUpResponseModel createUser(SignUpRequestModel signUpRequestModel) {
		
		ModelMapper modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		
		UserDto mappedUser = modelMapper.map(signUpRequestModel, UserDto.class);
		mappedUser.setUserId(UUID.randomUUID().toString());
		mappedUser.setEncryptedPassword(bCryptPasswordEncoder.encode(signUpRequestModel.getPassword()));
		
		Date currentDate = new Date();
		String dob = mappedUser.getDob();
		
		if(Long.valueOf(dob) > currentDate.getYear()-20)
			mappedUser.setRole(Roles.STUDENT);
		else
			mappedUser.setRole(Roles.TEACHER);
		
		UserEntity detachedUser = modelMapper.map(mappedUser, UserEntity.class);
		UserEntity savedUser = userRepository.save(detachedUser);
		
		SignUpResponseModel returnValue = modelMapper.map(savedUser, SignUpResponseModel.class);
		
		return returnValue;
	
	}

	@Override
	public UserDto getUserDetailsByEmail(String email) {
		ModelMapper modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		
		UserEntity foundUser = userRepository.findByEmail(email);
		UserDto user = modelMapper.map(foundUser, UserDto.class);
		
		return null;
	}

}
