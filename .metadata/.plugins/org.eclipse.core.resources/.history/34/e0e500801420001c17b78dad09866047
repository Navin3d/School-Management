package gmc.project.schoolmanagement.apigateway.security;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import reactor.core.publisher.Mono;

@Component
public class AuthorizationHeaderFilter extends AbstractGatewayFilterFactory<AuthorizationHeaderFilter> {

	private final Environment environment;
	
	public AuthorizationHeaderFilter(Environment environment) {
		super();
		this.environment = environment;
	}

	public static class config {}
	
	@Override
	public GatewayFilter apply(AuthorizationHeaderFilter config) {
		// TODO Auto-generated method stub
		return null;
	}
	
	private Mono<Void> onError(ServerWebExchange exchange, String error, HttpStatus status) {
		ServerHttpResponse response = exchange.getResponse();
		response.setStatusCode(status);
		return response.setComplete();
	}

	private boolean isJwtValid(String jwt) {
		
		String secretKey = Base64.getEncoder().encodeToString(environment.getProperty("token.secret").getBytes(StandardCharsets.UTF_8));
		
		boolean returnValue = true;
		
		String subject = null;
		
		try {
			subject = Jwts.parser()
					.setSigningKey(secretKey)
					.parseClaimsJws(jwt)
					.getBody().getSubject();
		} catch (Exception e) {
			returnValue = false;
		}
		
		if(subject.isEmpty() || subject == null)
			returnValue = false;
		
		
		return returnValue;
	}

}
